from common import *
from structures import *
from ai import *
from entity import *
from structures import civilization
import datetime
import pygame
from pipe import guipipe
import threading

class level(object):

  def __init__(self, filename):
    self.f = open(filename, 'r')

  def parseTiles(self):
    common.structures = []
    common.ai.mobins = []
    common.en.entitys = []

    import os, json
    # self.eventloop = True
    # t = threading.Thread(target=self.doEventLoop)
    # t.daemon = True
    # t.start()
    # print self.f.read()

    parsed = json.loads(self.f.read())

    # self.eventloop = False

    if not parsed or len(parsed) < 0:
      print "ERROR: Map doesn't contain any tiles?"
      common.running = False
      return [[]]

    if parsed[0].has_key('map'): 
      common.mapx = -parsed[0]['map'][0]
      common.mapy = -parsed[0]['map'][1]


    maplist=[]
    tiledict = self.getKey("tiles", parsed)
    villagedict = self.getKey("structures", parsed)
    mobsdict = self.getKey("mobs", parsed)
    entitysdict = self.getKey("entitys", parsed)

    for pair in tiledict:
      # maplist[]
      try:
        if maplist[int(pair["x"])]: pass
      except IndexError:
        # print int(pair["x"])
        maplist.insert(int(pair["x"]), [])
        # print maplist[int(pair["x"])]

      if pair.has_key("biome"):
        biome = pair['biome']
      else:
        biome = None

      maplist[int(pair["x"])].insert(int(pair["y"]), (pair["tile"], biome) )

    if villagedict:
      for pair in villagedict:  
        villagename, __ = pair.items()[0]
        # print villagename
        vlist = dict(vdict.items()[0] for vdict in pair.values()[0]) 

        if vlist["type"] == "village":

          if vlist.has_key('houses'):
            houses = []
            for h in vlist["houses"]:
              houses.append(h)
          else:
            houses = [[1,1,0]]

          common.structures.append([villagename, vlist["x"], vlist["y"], vlist["sx"], vlist["sy"], vlist["population"], houses, vlist["health"], vlist["maxhealth"], "village", vlist["owner"]])
        
        elif vlist["type"] == "camp":
          common.structures.append([villagename, vlist["x"], vlist["y"], 0, 0, 0, 0, vlist["health"], vlist["maxhealth"], "camp", vlist["owner"]])
        
        elif vlist["type"] == "woodyard":
          common.structures.append([villagename, vlist["x"], vlist["y"], 0, 0, 0, 0, vlist["health"], vlist["maxhealth"], "woodyard", vlist["owner"]])
        
        elif vlist["type"] == "oremine":
          common.structures.append([villagename, vlist["x"], vlist["y"], 0, 0, 0, 0, vlist["health"], vlist["maxhealth"], "oremine", vlist["owner"]])

    if mobsdict:
      for pair in mobsdict:
        mobtype, __ = pair.items()[0]
        mdict = dict(vdict.items()[0] for vdict in pair.values()[0])
        exec "common.ai.mobins.append( "+mobtype+"( ('None'), "+str(mdict['x'])+", "+str(mdict['y'])+"))"
        common.ai.mobins[-1].owner = mdict['owner']
        common.ai.mobins[-1].maxhealth = mdict['health']
        common.ai.mobins[-1].health = mdict['health']
        common.ai.mobins[-1].x = int(mdict['x'])
        common.ai.mobins[-1].y = int(mdict['y'])

    if entitysdict:
      for pair in entitysdict:
        entitytype, __ = pair.items()[0]
        edict = dict(edict.items()[0] for edict in pair.values()[0])
        if edict == "sign":
          exec "common.en.entitys.append("+entitytype+"())"
          common.en.entitys[-1].owner = edict['owner']
          common.en.entitys[-1].message = edict['message']
          common.en.entitys[-1].x = int(edict['x'])
          common.en.entitys[-1].y = int(edict['y'])

    return maplist

  def getKey(self, string, parsed):
    for ct in parsed:
      try:
        if ct[string]: return ct[string]
        break
      except KeyError:
        pass

  def savelevel(self):
    import os
    # if common.debug: 
    #   print "Saving World..."
    #   print "TODO: FIXME!"
    # return

    # Open The World File
    with open(os.path.join(common.rootdir, "saves", common.levelname, "level.json"), 'w+') as f:
      # f.write('// Generated by Age Of Colonization\n')
      # if datetime:
        # t = datetime.datetime.now()
        # f.write('// On '+str(t.time())+", "+str(t.date()))

      # Map x and y
      f.write('\n\n[{"map": ['+str(-common.mapx)+', '+str(-common.mapy)+"]},\n\n")

      # Map tiles
      f.write('{"tiles": [\n')
      for xct,tilex in enumerate(common.g.tilemap):

        for yct,tiley in enumerate(tilex[:-1]):
          f.write('  {"x": '+str(xct)+', "y": '+str(yct)+', "tile": "'+tiley+'"},\n')
          # print len(tilex), len(tiley), xct, yct

      f.write('  {"x": '+str(xct)+', "y": '+str(yct)+', "tile": "'+tiley+'"}]}]')

      return

      # Structures
      f.write('- structures:\n')
      for v in civilization.structures:

        # Write title
        if not v.name: 
          f.write('  - '+v.__class__.__name__+':\n')
        else:
          f.write('  - '+v.name+":\n")

        # Write all the attributes for the object
        f.write('    - type: '+v.__class__.__name__+'\n')
        f.write('    - x: '+str(v.x/common.tilewidth)+'\n')
        f.write('    - y: '+str(v.y/common.tilewidth)+'\n')

        if hasattr(v, 'w'): f.write('    - sx: '+str(v.w/common.tilewidth)+'\n')
        if hasattr(v, 'h'): f.write('    - sy: '+str(v.h/common.tilewidth)+'\n')

        f.write('    - health: '+str(v.health)+'\n')
        f.write('    - maxhealth: '+str(v.maxhealth)+'\n')

        if hasattr(v, 'houseloc'): f.write('    - houses: '+str( self.getHouseList(v.houseloc) )+'\n')
        if hasattr(v, 'population'): f.write('    - population: '+str(v.population)+'\n')
        if hasattr(v, 'owner'): f.write('    - owner: '+v.owner+'\n')

        f.write('\n')


      # Mobs
      f.write('- mobs:\n')
      for m in common.ai.mobins:
        f.write('  - '+m.__class__.__name__+':\n')
        f.write('    - x: '+str(m.x)+'\n')
        f.write('    - y: '+str(m.y)+'\n')
        f.write('    - maxhealth: '+str(m.maxhealth)+'\n')
        f.write('    - health: '+str(m.health)+'\n')
        f.write('    - owner: '+str(m.owner)+'\n')

        f.write('\n')

      # Entitys
      f.write('- entitys:\n')
      for e in common.en.entitys:

        f.write('  - '+e.__class__.__name__+':\n')
        f.write('    - x: '+str(e.x)+'\n')
        f.write('    - y: '+str(e.y)+'\n')

        if hasattr(e, 'health'): f.write('    - health: '+str(e.health)+'\n')
        if hasattr(e, 'owner'): f.write('    - owner: '+e.owner+'\n')
        if hasattr(e, 'message'): f.write('    - message: '+ e.message.replace('\n', '\\n') +'\n')

        f.write('\n')

      # Close file
      if common.debug: print "World Save Complete!"
      f.close()


  def getHouseList(self, hl):
    out = []
    for t in xrange(0, len(common.cv.buildingtextures)):
      out += [ [l[0], l[1], t] for l in hl if l[2] == common.cv.buildingtextures[t]]

    return out

  def close(self):
    self.f.close()
